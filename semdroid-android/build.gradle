/*
 * Copyright 2014 Alexander Oprisnik
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:0.13+'
    }
}
apply plugin: 'com.android.application'

repositories {
    mavenCentral()

    maven {
        // dex2jar
        url "http://repository-dex2jar.forge.cloudbees.com/release/"
    }
}

dependencies {
    compile 'com.android.support:support-v4:20.+'

    compile fileTree(dir: '../semdroid-plugin-spa/libs', include: '*.jar')

    // add the plugins
    compile project(':semdroid-plugin-spa')
    compile project(':semdroid-plugin-examples')

}

def versionMajor = 1
def versionMinor = 0
def versionPatch = 1
def versionBuild = 0

android {
    compileSdkVersion 20
    buildToolsVersion '20.0.0'

    defaultConfig {
        versionCode versionMajor * 10000 + versionMinor * 1000 + versionPatch * 100 + versionBuild
        versionName "${versionMajor}.${versionMinor}.${versionPatch}"
        minSdkVersion 11
        targetSdkVersion 19
        applicationId 'com.oprisnik.semdroid'
    }

    signingConfigs {
        debug {
            def debugKeystore = file('../distribution/debug.keystore')
            if (debugKeystore.canRead()) {
                println 'using ' + debugKeystore
                storeFile debugKeystore
            } else {
                println 'using default debug.keystore'
            }
        }

        release {
            def Properties properties = new Properties()
            def propFile = file('../distribution/signing.properties')
            if (propFile.canRead()) {
                properties.load(new FileInputStream(propFile))
                storeFile file(properties['keystore'])
                storePassword properties['keystore.password']
                keyAlias properties['keyAlias']
                keyPassword properties['keyPassword']
            } else {
                println 'Error: could not find ../distribution/signing.properties - using default values!'
            }
        }
    }

    buildTypes {

        debug {
            runProguard false
            versionNameSuffix '-debug'
            applicationIdSuffix '.debug'
            signingConfig signingConfigs.debug
        }

        release {
            runProguard false
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), file('proguard-project.txt')
        }
    }

    packagingOptions {
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
    }
}